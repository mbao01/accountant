datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "../app/schemas/generated"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix            = "ObjectSchema"
  useDecimalJs          = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  imports               = null

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = false // (default) uses prisma's scheme for JSON field nullability
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique /// @zod.email()
  firstname  String    /// @zod.min(3)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Account   Account[]
  Record    Record[]
  Password  Password?
  role      Role      @default(MEMBER)

  @@map("users")
}

model Password {
  hash String

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique /// @zod.cuid()

  @@map("passwords")
}

model Account {
  id              String       @id @unique @default(cuid())
  name            String       /// @zod.min(3)
  number          String       @unique  /// @zod.min(3)
  sortCode        String?
  Currency        Currency     @relation(fields: [currencyId], references: [id])
  currencyId      String       /// @zod.length(3)
  startingBalance Float        /// @zod.custom(z.preprocess((a) => parseFloat(String((z.string().safeParse(a) as any).data).replaceAll(/[^\d.]/gi, '')), z.number().positive()) as unknown as z.ZodNumber)
  bankName        String       /// @zod.min(3)
  bankAddress     String?
  bankCountry     String       /// @zod.min(3)
  tag             TagPattern?  @default(DOTTED)
  createdAt       DateTime?    @default(now())
  updatedAt       DateTime?    @updatedAt
  Record          Record[]
  RecordType      RecordType[]
  Debit           Transfer[]   @relation("Sender")
  Credit          Transfer[]   @relation("Recipient")
  User            User         @relation(fields: [userId], references: [id])
  userId          String       /// @zod.cuid()

  @@map("accounts")
}

model Currency {
  id        String       @id @unique @default(cuid())
  code      CurrencyCode @unique
  sign      CurrencySign @unique
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  Account   Account[]

  @@map("currencies")
}

model RecordType {
  id              String           @id @unique @default(cuid())
  name            String           @unique /// @zod.min(3)
  description     String           /// @zod.min(3)
  tag             TagColor?        @default(BLUE)
  hidden          Boolean?         @default(false)
  Account         Account[]
  RecordCategory  RecordCategory[]
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt
  Record          Record[]

  @@map("record_types")
}

model RecordCategory {
  id           String      @id @unique @default(cuid())
  name         String      /// @zod.min(3)
  description  String      /// @zod.min(3)
  hidden       Boolean?    @default(false)
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @updatedAt
  RecordType   RecordType  @relation(fields: [recordTypeId], references: [id])
  recordTypeId String      /// @zod.cuid()
  Record       Record[]

  @@map("record_categories")
}

model Record {
  id               String         @id @unique @default(cuid())
  amount           Float          /// @zod.custom(z.preprocess((a) => parseFloat(String((z.string().safeParse(a) as any).data).replaceAll(/[^\d.]/gi, '')), z.number().positive()) as unknown as z.ZodNumber)
  Type             RecordType     @relation(fields: [recordTypeId], references: [id])
  Category         RecordCategory @relation(fields: [recordCategoryId], references: [id])
  Account          Account        @relation(fields: [accountId], references: [id])
  User             User           @relation(fields: [createdBy], references: [id])
  Transfer         Transfer?
  currencyCode     CurrencyCode
  note             String?
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt
  recordTypeId     String         /// @zod.cuid()
  recordCategoryId String         /// @zod.cuid()
  accountId        String         /// @zod.cuid()
  createdBy        String         /// @zod.cuid()

  @@map("records")
}

model Transfer {
  id                String      @id @unique @default(cuid())
  Record            Record      @relation(fields: [recordId], references: [id])
  Sender            Account     @relation(name: "Sender", fields: [senderId], references: [id])
  Recipient         Account     @relation(name: "Recipient", fields: [recipientId], references: [id])
  createdAt         DateTime?   @default(now())
  updatedAt         DateTime?   @updatedAt
  recordId          String      @unique /// @zod.cuid()
  senderId          String      /// @zod.cuid()
  recipientId       String      /// @zod.cuid()

  @@map("transfers")
}

enum Role {
  GUEST         @map("Guest")
  OWNER         @map("Owner")
  MEMBER        @map("Member")
  ADMINISTRATOR @map("Admin")
}

enum CurrencyCode {
  USD
  NGN
  EUR
  RUB
  GBP
  CNY
}

enum CurrencySign {
  USD @map("$")
  GBP @map("£")
  CNY @map("¥")
  RUB @map("₽")
  NGN @map("₦")
  EUR @map("€")
}

enum TagColor {
  RED         @map("Red")
  BLUE        @map("Blue")
  GRAY        @map("Gray")
  PINK        @map("Pink")
  PUCE        @map("Puce")
  BROWN       @map("Brown")
  GREEN       @map("Green")
  SMALT       @map("Smalt")
  BISQUE      @map("Bisque")
  DAMASK      @map("Damask")
  JASPER      @map("Jasper")
  ORANGE      @map("Orange")
  PURPLE      @map("Purple")
  TITIAN      @map("Titian")
  VIOLET      @map("Violet")
  YELLOW      @map("Yellow")
  CATTLEYA    @map("Cattleya")
  BITTERSWEET @map("Bittersweet")
}

enum TagPattern {
  WAVY        @map("Wavy")
  OMBRE       @map("Ombre")
  PLAID       @map("Plaid")
  DOTTED      @map("Dotted")
  FLORAL      @map("Floral")
  ZIGZAG      @map("Zigzag")
  CHEVRON     @map("Chevron")
  CIRCLES     @map("Circles")
  DIAMOND     @map("Diamond")
  LATTICE     @map("Lattice")
  PAISLEY     @map("Paisley")
  ROUNDED     @map("Rounded")
  STRIPED     @map("Striped")
  GEOMETRIC   @map("Geometric")
  BASKETWEAVE @map("Basketweave")
}
